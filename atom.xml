<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lethalvanilla.github.io/</id>
    <title>Matty</title>
    <updated>2022-05-11T12:01:22.655Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lethalvanilla.github.io/"/>
    <link rel="self" href="https://lethalvanilla.github.io/atom.xml"/>
    <subtitle>复习网站</subtitle>
    <logo>https://lethalvanilla.github.io/images/avatar.png</logo>
    <icon>https://lethalvanilla.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Matty</rights>
    <entry>
        <title type="html"><![CDATA[Java堆]]></title>
        <id>https://lethalvanilla.github.io/post/java-dui/</id>
        <link href="https://lethalvanilla.github.io/post/java-dui/">
        </link>
        <updated>2022-05-11T11:56:59.000Z</updated>
        <content type="html"><![CDATA[<p>Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。</p>
<p>这个区域的唯一目的就是存放对象实例。</p>
<p>Java虚拟机并没有具体实现的固有内存布局，所谓的“经典分代”的仅仅是一部分垃圾收集器的共同特性或者说设计风格而已。</p>
<p><em>经典分代理论设计</em></p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/LenthDose/PicGo@main/image-20220511194048205.png" alt="image-20220511194048205" loading="lazy"></figure>
<p>在G1收集器出现之前，虚拟机的垃圾收集器全部都基于“经典分代”来设计，需要新生代、老年代收集器搭配才能工作。</p>
<h3 id="tlab">TLAB</h3>
<h4 id="java对象的内存分配过程如何保证线程安全">Java对象的内存分配过程如何保证线程安全？</h4>
<p>为了解决并发过程中，线程可能会把对象的引用指向同一个内存区域的情况。</p>
<p>HotSpot虚拟机采用了：每个线程在Java堆中预先分配一小块内存，然后在给对象分配内存的时候，直接在自己的这块“私有”的内存上进行分配，只有当这块“私有”内存用完， 再分配新的“私有”内存。</p>
<p>这部分Buffer的从堆中划分出来的，但是本地线程独享的。</p>
<hr>
<p>TLAB的线程独享是针对于分配动作，至于读取、垃圾回收等工作是线程共享的，而且在使用上也没有什么区别。</p>
<p>所以有了TLAB技术，堆内存并不是完完全全的线程共享。</p>
<p>将Java堆细分的目的只是为了更好地回收内存，或者更快地分配内存。</p>
<p>Java堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的，但是对于大对象，多数虚拟机实现处于实现简单、存储高效的考虑，很可能会要求连续的内存空间。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java内存区域(上)]]></title>
        <id>https://lethalvanilla.github.io/post/java-nei-cun-qu-yu-shang/</id>
        <link href="https://lethalvanilla.github.io/post/java-nei-cun-qu-yu-shang/">
        </link>
        <updated>2022-05-11T11:19:57.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Java内存区域</strong>是指JVM运行时将数据分区域存储 ，简单的说就是不同的数据放在不同的地方。通常又叫 <strong>运行时数据区域</strong>。</p>
<p><em>1.8之前</em></p>
<figure data-type="image" tabindex="1"><img src="https://segmentfault.com/img/remote/1460000038190586" alt="Java内存区域 1.8之前" loading="lazy"></figure>
<p><em>1.8之后</em></p>
<figure data-type="image" tabindex="2"><img src="https://segmentfault.com/img/remote/1460000038190585" alt="Java内存区域 1.8" loading="lazy"></figure>
<h3 id="程序计数器">程序计数器</h3>
<p>JVM中的PC寄存器是对物理PC寄存器的一种对象模拟</p>
<p>在JVM规范中，每个线程都有自己的程序计数器，属于线程私有，生命周期与线程的生命周期保持一致。</p>
<p>一个处理器只会执行一条线程的指令。一个线程有一个方法在执行。</p>
<p>如果线程正在执行的是Java方法，存储的是字节码指令的地址，如果执行的是本地(Native)方法，则值为空(Undefined)</p>
<h4 id="作用"><em>作用</em></h4>
<p>程序计数器就是用来存储指向下一条字节码指令的地址。</p>
<hr>
<h4 id="为什么要用程序计数器来存储字节码指令的地址"><em>为什么要用程序计数器来存储字节码指令的地址？</em></h4>
<p>因为Java虚拟机的多线程是线程间切换，分配CPU执行时间来实现的，当CPU从一个线程切换到另一个线程后，就需要知道当前的线程是从哪个地方继续执行，所以JVM的字节码解释器就可以通过读取程序计数器里的值来确定需要执行的下一条指令。</p>
<hr>
<h4 id="为什么程序计数器要被设定为私有的"><em>为什么程序计数器要被设定为私有的？</em></h4>
<p>是为了能够准确地记录各个线程的字节码指令地址，这样各个线程之间可以进行独立计算，而不会出现相互干扰的情况。</p>
<h3 id="java虚拟机栈">Java虚拟机栈</h3>
<p>每个线程在创建时都会创建一个虚拟机栈，内部保存着一个个栈帧，对应着每一次的Java方法调用。</p>
<p>栈帧(Stack Frame)用于存储局部变量表，操作数栈、动态链接、方法出口等信息。</p>
<figure data-type="image" tabindex="3"><img src="https://img2020.cnblogs.com/blog/2123988/202010/2123988-20201012104116841-1633128901.jpg" alt="img" loading="lazy"></figure>
<h4 id="生命周期"><em>生命周期</em></h4>
<p>和程序计数器一样，是线程私有的，生命周期与线程一致</p>
<hr>
<h4 id="作用-2"><em>作用</em></h4>
<p>主管Java程序的运行，保存方法的局部变量、部分结果，并参与方法的调用和返回</p>
<hr>
<h4 id="关于栈的异常"><em>关于栈的异常</em></h4>
<p>Java虚拟机规范允许Java栈的大小是动态的或者是固定不变的。</p>
<p>如果采用固定大小的Java虚拟机栈，线程请求分配的栈容量超过了虚拟机栈允许的最大容量，Java虚拟机会抛出<code>StackOverflowError</code>异常。（一般在递归调用的时候会出现栈溢出问题）</p>
<p>如果可以进行动态扩展，并且在尝试扩展的时候无法申请到足够的内存，就会抛出<code>OutOfMemoryError</code>异常。</p>
<hr>
<h4 id="设置栈内存的大小"><em>设置栈内存的大小</em></h4>
<p>使用参数<code>-Xss</code>选项来设置线程的最大栈空间，栈的大小决定了函数调用的最大可达深度。</p>
<hr>
<h4 id="栈的存储单位"><em>栈的存储单位</em></h4>
<p>栈帧是一个内存区域，是一个数据集，维系着方法执行过程中的各种数据信息。</p>
<hr>
<h4 id="栈的运行原理"><em>栈的运行原理</em></h4>
<p>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧。</p>
<p>如果当前方法调用了其他，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧。</p>
<p>Java方法有两种返回函数的方式，一种是正常的函数返回，使用return指令；另外一种是抛出异常。</p>
<hr>
<h4 id="局部变量表"><em>局部变量表</em></h4>
<p>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量这些数据类型包括基本数据类型，对象引用（reference）和<code>returnAddress</code>类型（指向了一条字节码指令的地址）。</p>
<p>在Java程序被编译成Class文件时，局部变量表所需的大小就已经确定下来了，并且保存在方法的Code属性的max_locals数据项中。所以在方法运行期间局部变量表的大小是不可能被改变的。</p>
<p>方法嵌套调用的次数由栈的大小决定。一般来说，栈越大，方法嵌套调用次数就越多。但是如果一个函数的参数和局部变量越多，使得局部变量表膨胀，此函数的栈帧就越大，所以方法嵌套调用次数就减少。</p>
<p>生命周期与栈帧同步。</p>
<blockquote>
<p><strong>大小固定</strong>，局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。在Java程序被编译成Class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需要分配的最大局部变量表的容量。</p>
<p><strong>Slot单位</strong>，局部变量表的容量以变量槽（Slot）为最小单位，32位虚拟机中一个Slot可以存放一个32位以内的数据类型（boolean、byte、char、short、int、float、reference和returnAddress八种）<em>所以那些比较小的类型也占用32位内存（如boolean、byte、char、short）</em>，而double和long为64位数据类型，他们需要两个连续的Slot存储（64位虚拟机中可能只需要一个），<em>但如何保证其并发操作？</em></p>
<p><strong>引用类型</strong>，reference类型（引用类型）虚拟机规范没有明确说明它的长度，但一般来说，虚拟机实现至少都应当能从此引用中直接或者间接地查找到对象在Java堆中的起始地址索引和方法区中的对象类型数据。</p>
<p><strong>Slot是可以重用的</strong>，当Slot中的变量超出了作用域，那么下一次分配Slot的时候，将会覆盖原来的数据。<strong>Slot对对象的引用会影响GC（要是被引用，将不会被回收）。</strong></p>
<p><strong>方法返回地址</strong>，returnAddress类型是为字节码指令jsr、jsr_w和ret服务的，它指向了一条字节码指令的地址。</p>
</blockquote>
<hr>
<h4 id="变量槽slot"><em>变量槽（Slot）</em></h4>
<p>局部变量表最基本的存储单元是<code>Slot</code>（变量槽）</p>
<blockquote>
<p>byte、short、char 在存储前被转换为int，boolean也被转换为int，0表示false，非0表示true。long和double则占据两个slot。</p>
</blockquote>
<p>JVM会为局部变量表中的每一个<code>Slot</code>分配一个访问索引，通过这个索引即可成功访问到局部变量表中指向的局部变量值，当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会按照顺序被复制到局部变量表中的每一个slot上，如果需要访问局部变量表中的一个64 bit的局部变量时，只需要使用前一个索引即可。</p>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/LenthDose/PicGo@main/image-20220511144619609.png" alt="image-20220511144619609" loading="lazy"></figure>
<p>如果当前帧是由构造方法或实例方法创建的，那么该对象引用this将会存放在index为0的Slot处，其余的参数按照参数表顺序继续排列。</p>
<hr>
<h4 id="变量槽的重复利用"><em>变量槽的重复利用</em></h4>
<p>栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就可能会复用过期局部变量的槽位，从而达到节省资源的目的。Slot对对象的引用会影响GC。</p>
<blockquote>
<p>在实际编码中，因为java的特性，不做特殊处理，方法结束后局部变量表也会释放。</p>
</blockquote>
<hr>
<h4 id="静态变量与局部变量的对比"><em>静态变量与局部变量的对比</em></h4>
<p>静态变量有两次初始化的机会，第一次是在“准备阶段”，执行系统初始化，对类变量设置零值，另一次则是在“初始化”阶段，将程序员定义的初始值赋值。</p>
<p>局部变量不存在系统初始化的过程，意味着一旦定义了局部变量必须认为初始化，否则无法使用。</p>
<p>在栈帧中，与性能调优关系最为密切的就是局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递。</p>
<h3 id="操作数栈">操作数栈</h3>
<p>操作数栈(Operand Stack)， 每一个独立的栈帧除了包含局部变量表以外，还包含一个后进先出的操作数栈，也可以成为表达式栈。</p>
<h4 id="概述">概述</h4>
<p>操作数栈，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈和出栈。</p>
<p>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈，使用它们后再把结果压入栈。比如：执行复制、交换、求和等操作。</p>
<figure data-type="image" tabindex="5"><img src="https://img2020.cnblogs.com/blog/2123988/202010/2123988-20201012164854457-911644877.png" alt="img" loading="lazy"></figure>
<p>操作数栈，主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。</p>
<p>操作数就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的。</p>
<p>每个操作数栈都拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译器就定义好了，保存在方法的Code属性中名为maxstack的值中。</p>
<p>栈中的任何一个元素都是可以任意的Java数据类型：</p>
<ul>
<li>
<p>32bit的类型占用一个栈单位深度。</p>
</li>
<li>
<p>64bit的类型占用两个栈单位深度。</p>
</li>
</ul>
<p>操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标准的入栈和出栈操作来完成一次数据访问。如果被调用的方法有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新PC寄存器中下一条需要执行的字节码指令。</p>
<p>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证。</p>
<p>Java虚拟机的解释引擎是基于栈的执行引起，其中的栈指的就是操作数栈。</p>
<hr>
<h3 id="栈顶缓存技术">栈顶缓存技术</h3>
<p>基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也意味着将需要更多的指令分派次数和内存读写次数。</p>
<p>为了解决频繁读写的问题，JVM的设计者们提出了栈顶缓存技术，将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读写次数，提升执行引起的执行效率。</p>
<hr>
<h3 id="本地方法栈">本地方法栈</h3>
<p>本地方法栈是为虚拟机使用到本地方法服务</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://lethalvanilla.github.io/post/hello-gridea/</id>
        <link href="https://lethalvanilla.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>